[{"C:\\xampp\\htdocs\\office-pliss-react\\src\\index.js":"1","C:\\xampp\\htdocs\\office-pliss-react\\src\\App.js":"2","C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\Home\\Home.js":"3","C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\BuscarDomicilios\\BuscarDomicilios.js":"4","C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\AgregarDomicilios\\AgregarDomicilios.js":"5","C:\\xampp\\htdocs\\office-pliss-react\\src\\controller\\controladorGuardarDomicilio.js":"6","C:\\xampp\\htdocs\\office-pliss-react\\src\\Hooks\\useDomicilios.js":"7","C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\ListDomicilios\\ListDomicilios.js":"8","C:\\xampp\\htdocs\\office-pliss-react\\src\\Hooks\\exportaExcel.js":"9","C:\\xampp\\htdocs\\office-pliss-react\\src\\Hooks\\useEmpresas.js":"10"},{"size":251,"mtime":1611948060517,"results":"11","hashOfConfig":"12"},{"size":151,"mtime":1612966436921,"results":"13","hashOfConfig":"12"},{"size":1344,"mtime":1612408564951,"results":"14","hashOfConfig":"12"},{"size":6754,"mtime":1613047666325,"results":"15","hashOfConfig":"12"},{"size":10552,"mtime":1613055236359,"results":"16","hashOfConfig":"12"},{"size":894,"mtime":1613047679356,"results":"17","hashOfConfig":"12"},{"size":664,"mtime":1613024346223,"results":"18","hashOfConfig":"12"},{"size":519,"mtime":1613007772000,"results":"19","hashOfConfig":"12"},{"size":425,"mtime":1612966426379,"results":"20","hashOfConfig":"12"},{"size":482,"mtime":1613024964073,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"4o1w94",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\xampp\\htdocs\\office-pliss-react\\src\\index.js",[],["46","47"],"C:\\xampp\\htdocs\\office-pliss-react\\src\\App.js",[],"C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\Home\\Home.js",[],"C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\BuscarDomicilios\\BuscarDomicilios.js",["48","49"],"import React, { useEffect, useState } from 'react';\r\nimport { Table, Button, Form }        from 'react-bootstrap';\r\nimport SweeAlert                      from 'sweetalert2'\r\n\r\nimport { getDomicilios, getDomiciliosFecha }  from '../../Hooks/useDomicilios';\r\nimport ListDomicilios                         from '../ListDomicilios/ListDomicilios';\r\nimport { exportExcel }                        from '../../Hooks/exportaExcel'\r\nimport getEmpresas                            from '../../Hooks/useEmpresas';\r\n\r\nimport iconExcel from '../../images/excel.png'\r\nimport './style.css'\r\n\r\nexport default function BuscarDomicilios() {\r\n\r\n  const [domicilios, setDomicilios] = useState([]);\r\n  const [fechaI, setFechaI]         = useState('');\r\n  const [fechaF, setFechaF]         = useState('');\r\n  const [empresas, setEmpresas]     = useState(getEmpresas())\r\n  const [domiciliosCargados, setDomiciliosCargados] = useState([])\r\n  const [empresaSelected, isEmpresaSelected]        = useState('');\r\n  const [otraEmpresa, setOtraEmpresa]               = useState('');\r\n  useEffect(() => {\r\n    getDomicilios().then((data) => {\r\n      setDomicilios(data);\r\n    });\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    const argsDomicilios = {\r\n      otraEmpresa,\r\n      empresaSelected,\r\n      fechaI,\r\n      fechaF\r\n    }\r\n    if(!fechaI || !fechaF){\r\n      SweeAlert.fire({\r\n        title: 'Estas seguro?',\r\n        text: 'Si no elijes fecha de inicio y fecha fin, te saldra el reporte general, este puede durar mucho tiempo',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Si quiero'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          getDomiciliosFecha(argsDomicilios)\r\n            .then((data) => {\r\n              setDomiciliosCargados(data);\r\n              if(data.status === 'info'){\r\n                SweeAlert.fire({\r\n                  icon: 'info',\r\n                  title: 'Upss ...',\r\n                  text: data.message\r\n                })\r\n                return \r\n              }else{\r\n                exportExcel(data);\r\n                SweeAlert.fire(\r\n                  'Excelente',\r\n                  'El reporte se esta generando, espera unos minutos o segundos!',\r\n                  'success'\r\n                );\r\n              }\r\n            })\r\n        }\r\n      })\r\n    }else{\r\n      getDomiciliosFecha(argsDomicilios)\r\n      .then((data) => {\r\n        setDomiciliosCargados(data);\r\n        if(data.status === 'info'){\r\n          SweeAlert.fire({\r\n            icon: 'info',\r\n            title: 'Upss ...',\r\n            text: data.message\r\n          })\r\n          return \r\n        }else{\r\n          exportExcel(data);\r\n          SweeAlert.fire(\r\n            'Excelente',\r\n            'El reporte se esta generando, espera unos minutos o segundos!',\r\n            'success'\r\n          );\r\n        }\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='mt-2'>\r\n      <div className='d-inline-block'>\r\n        <Form className='container-fomulario'>\r\n          <Form.Group controlId='formBasicEmail' className='d-inline-block'>\r\n            <Form.Label>\r\n              <i>Fecha Inicio</i>\r\n            </Form.Label>\r\n            <Form.Control\r\n              type='date'\r\n              required\r\n              onChange={(val) => setFechaI(val.target.value)}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group\r\n            controlId='formBasicPassword'\r\n            className='d-inline-block'\r\n          >\r\n            <Form.Label>\r\n              <i>Fecha Final</i>\r\n            </Form.Label>\r\n            <Form.Control\r\n              required\r\n              type='date'\r\n              onChange={(val) => {\r\n                setFechaF(val.target.value);\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          {\r\n            empresas.length && (\r\n              <Form.Group className='d-inline-block'>\r\n                <Form.Label>\r\n                  <i>Selecciona Empresa</i>\r\n                </Form.Label>\r\n                <Form.Control as='select' onChange={(text) => isEmpresaSelected(text.target.value) } custom>\r\n                  <option value='Ninguna'>Ninguna</option>\r\n                    {\r\n                      empresas.map(({ id, name }) => {\r\n                        return <option key={id} value={name}>{ name }</option>\r\n                      })\r\n                    }\r\n                </Form.Control>\r\n              </Form.Group>\r\n            )\r\n          }\r\n          {\r\n            empresaSelected === 'Otro' && (\r\n              <Form.Group className='d-inline-block'>\r\n                <Form.Label>\r\n                  <i>Ingresa nombre de la empresa o del cliente</i>\r\n                </Form.Label>\r\n                <Form.Control \r\n                  type='text' \r\n                  placeholder='Nombre del cliente o empresa'  \r\n                  onChange={(text) => setOtraEmpresa(text.target.value)}    \r\n                />\r\n              </Form.Group>\r\n            )\r\n          }\r\n          <div className='button-excel'>\r\n            <Button variant='success' className='mb-1 mr-auto' onClick={() => handleSubmit()}>\r\n              Imprimir reporte\r\n              <img src={iconExcel} alt={iconExcel} className='icon' />\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n      <Table responsive='xl' striped hover variant='dark' className='text-center'>\r\n        <thead>\r\n          <tr>\r\n            <th>Empresa</th>\r\n            <th>Fecha Domicilio</th>\r\n            <th>Hora Final</th>\r\n            <th>Hora Inicio</th>\r\n            <th>Recargos</th>\r\n            <th>Valor Base</th>\r\n            <th>Valor Total</th>\r\n            <th>Descripci√≥n</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            domicilios.length ? (\r\n              domicilios.map(({id, empresa, fecha_domicilio, hora_i, hora_f, recargos, valor_base, valor_total, descripcion}) => {\r\n                  return (\r\n                    <ListDomicilios \r\n                      key={id}\r\n                      empresa={empresa}\r\n                      fecha_domicilio={fecha_domicilio}\r\n                      hora_f={hora_f}\r\n                      hora_i={hora_i}\r\n                      recargos={recargos}\r\n                      valor_base={valor_base}\r\n                      valor_total={valor_total}\r\n                      descripcion={descripcion}\r\n                    />\r\n                  )\r\n                }\r\n              )\r\n            ):(\r\n              <tr>\r\n                <td colSpan={7}>No hay domicilios</td>\r\n              </tr>\r\n            )\r\n          }\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\AgregarDomicilios\\AgregarDomicilios.js",["50"],"C:\\xampp\\htdocs\\office-pliss-react\\src\\controller\\controladorGuardarDomicilio.js",[],"C:\\xampp\\htdocs\\office-pliss-react\\src\\Hooks\\useDomicilios.js",["51"],"import axios from 'axios'\r\nconst URL = 'http://localhost:8080/office-pliss-react/build/controller.php'\r\n\r\nconst saveDomicilio = async (newDomicilio) => {\r\n    const response  = await axios.post(URL, JSON.stringify(newDomicilio))\r\n    const data      = await response\r\n}\r\n\r\nconst getDomicilios = async () => {\r\n    const response  = await axios.get(URL)\r\n    const { data }  = await response\r\n    return data\r\n}\r\n\r\nconst getDomiciliosFecha = async (argsDomicilios) => {\r\n    const response = await axios.post(URL, argsDomicilios)\r\n    const { data } = await response\r\n    return data\r\n}\r\n\r\nexport {\r\n    saveDomicilio,\r\n    getDomicilios,\r\n    getDomiciliosFecha\r\n}","C:\\xampp\\htdocs\\office-pliss-react\\src\\Components\\ListDomicilios\\ListDomicilios.js",[],"C:\\xampp\\htdocs\\office-pliss-react\\src\\Hooks\\exportaExcel.js",[],"C:\\xampp\\htdocs\\office-pliss-react\\src\\Hooks\\useEmpresas.js",["52"],"\r\nexport default () => {\r\n    const allEmpresas = [\r\n        {\r\n            id: 0, \r\n            name: 'Soluciones Logisticas Integral Empresarial'\r\n        },\r\n        {\r\n            id: 1, \r\n            name: 'Ut Ecoseg'\r\n        },\r\n        {\r\n            id: 2, \r\n            name: 'Ansegtec'\r\n        },\r\n        {\r\n            id: 3, \r\n            name: 'Unico'\r\n        },\r\n        {\r\n            id: 4, \r\n            name: 'Otro'\r\n        }\r\n    ]\r\n    return allEmpresas\r\n}",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":18,"column":20,"nodeType":"59","messageId":"60","endLine":18,"endColumn":31},{"ruleId":"57","severity":1,"message":"61","line":19,"column":10,"nodeType":"59","messageId":"60","endLine":19,"endColumn":28},{"ruleId":"57","severity":1,"message":"58","line":17,"column":20,"nodeType":"59","messageId":"60","endLine":17,"endColumn":31},{"ruleId":"57","severity":1,"message":"62","line":6,"column":11,"nodeType":"59","messageId":"60","endLine":6,"endColumn":15},{"ruleId":"63","severity":1,"message":"64","line":2,"column":1,"nodeType":"65","endLine":26,"endColumn":2},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'setEmpresas' is assigned a value but never used.","Identifier","unusedVar","'domiciliosCargados' is assigned a value but never used.","'data' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]